<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>折腾 on TcpCat</title><link>http://tcp.cat/tags/%E6%8A%98%E8%85%BE/</link><description>Recent content in 折腾 on TcpCat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 Nov 2020 02:16:00 +0800</lastBuildDate><atom:link href="http://tcp.cat/tags/%E6%8A%98%E8%85%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>使用docker部署rsshub</title><link>http://tcp.cat/post/docker%E9%83%A8%E7%BD%B2rsshub/</link><pubDate>Thu, 19 Nov 2020 02:16:00 +0800</pubDate><guid>http://tcp.cat/post/docker%E9%83%A8%E7%BD%B2rsshub/</guid><description>首先是docker compose 具体步骤可以参考rsshub文档，总之使用docker compose一把梭就OK啦。
先下载docker-compose.yml weget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml 这里可以先根据个人喜好配置一下docker-compose.yml的环境变量：
services: rsshub: ...... environment: # 因为部署在共网上，还是不要debug信息了。注意false的引号... DEBUG_INFO: &amp;quot;false&amp;quot; ACCESS_KEY: ILoveRSSHub ...... 然后是持久化redis docker volume create redis-data 接着就可以run起来 docker-compose up -d 然后是用Nginx反向代理 首先先找到rsshub在docker容器的ip地址，这里用的是docker inspect，rsshub_rsshub_1是rsshub在docker的名称，用容器ID也行，它们需要根据实际情况更改，可以用docker ps找到。
docker inspect rsshub_rsshub_1 | grep IPAddress &amp;gt;&amp;gt;&amp;gt; &amp;quot;SecondaryIPAddresses&amp;quot;: null, &amp;quot;IPAddress&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;IPAddress&amp;quot;: &amp;quot;172.19.0.4&amp;quot;, 额，这结果看起来不是那么优雅，所以还可以这样：
docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) &amp;gt;&amp;gt;&amp;gt; /rsshub_rsshub_1 - 172.19.0.4 /rsshub_browserless_1 - 172.19.0.3 /rsshub_redis_1 - 172.</description></item><item><title>使用github action和Firebase搭配来托管博客</title><link>http://tcp.cat/post/%E4%BD%BF%E7%94%A8github-action%E5%92%8Cfirebase%E6%90%AD%E9%85%8D%E6%9D%A5%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 22 Feb 2020 02:16:00 +0800</pubDate><guid>http://tcp.cat/post/%E4%BD%BF%E7%94%A8github-action%E5%92%8Cfirebase%E6%90%AD%E9%85%8D%E6%9D%A5%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2/</guid><description>絮絮叨叨 考虑到个人博客的流量不会很大(应该是除了自己基本没有( &amp;gt;﹏&amp;lt;。)),使用vps的话就太麻烦了.自己首先弄好linux环境,然后要配置nginx或者Apache之类的,之后是申请SSL证书,解析DNS&amp;hellip;虽然步骤也不是很多,但是万一VPS就被DDOS了呢,就被hack了呢&amp;hellip;其实不用vps最主要原因是&amp;hellip;穷´_&amp;gt;` 正经说来,搭建个人博客这种静态网站的主要工作有:
选择白嫖的服务器,国外的服务器可以用Github Pages, Google的Firebase,Netfly etc..如果域名有备案的话,可以使用七牛的对象存储,每月10G的免费流量. 腾讯云cos新用户只免费6个月了.其实买的话也挺便宜,流量不多每个月也就几块钱.但我懒得备案了就用了Firebase,国内访问似乎还行. 然后就是把域名解析到服务器上.现在用的是Cloudflare管理dns解析.现在Github Pages支持HTTPS了,Firebase也行.直接根据提示解析过去就行. 假如托管在VPS上,可以自己申请Let&amp;rsquo;sEncrypt的证书,然后要在Nginx或Apache上设置好https的路由. 选择一个静态博客生成器,Jekyll/Hexo/Hugo/etc&amp;hellip;其实用哪个都没所谓,保存好自己的markdown文件,然后哪个有心仪的主题就用哪个.甚至都可以自己写一个,解析markdown到HTML,再折腾出一套css就ok了. 将hugo或其他生成器生成的静态网站内容推送到托管的服务器上面,一般是public文件夹里面的内容. 最后建议设置一个闹钟每天提醒写博客,不然只有域名或vps续费的时候才会想起来自己居然还有个博客¯\_(ツ)_/¯ 使用Google Firebase托管博客 使用firebase的原因很简单:
免费 国内暂时还能访问(Firebase官网还是要梯子╮(￣▽￣)╭) 能自定义域名 申请Firebase帐号时,记得选择Spark类型账户.申请完之后创建一个类型为Hosting的新项目.可以使用firebase-cli将本地文件夹推送到服务器上. curl -sL firebase.tools | bash #安装firebase-cli firebase login #完成本地登录 cd $BLOG #切换到自己的博客文件夹 firebase init 执行firebase init时会询问托管类型,因为是博客,选择Hosting就行啦.然后会有这么一个问题
? What do you want to use as your public directory? (public) Hugo的生成的静态网站就在public文件夹下,因此默认回车就行.有的则是在dist等其他文件夹下,别填错了.错了也没关系,在firebase.json里改就行. 然后接下来执行
firebase login:ci 这会生成一个TOKEN,在github action自动推送到firebase里会用到,记得保存在Github Repo里的Settings -&amp;gt;Secrets', 假如保存的名字为FIREBASE_TOKEN,那么github action`可以直接读取.
${{ secrets.FIREBASE_TOKEN }} 至此和Firebase相关的工作就都完成了,deploy的步骤会交给github action来完成.
使用Github Action来构建博客 因为有了Github Action这种工具,什么安装Hugo, Hexo,Nodejs,yarn环境什么的,本地电脑可以完全不考虑,新建好文件夹保存markdown即可.</description></item></channel></rss>